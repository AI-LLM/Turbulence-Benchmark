from Q29.$4_results_$5.Folder_$2.generated_answer import $3


# The largest index parameter based on which to generate lists.
largest_index = max(int($0), int($1))


def test_list_of_ones():
    list_of_ones = [1 for i in range(0, (largest_index + 1) * 10)]
    assert $3(list_of_ones) == 1


def test_list_of_same_number():
    for n in range(2, 21):
        list_of_same_nums = [n for i in range(0, (largest_index + 1) * 10)]
        assert $3(list_of_same_nums) == n


def test_list_of_prime_numbers():
    primes_list = [2, 3, 5, 7, 11] * (largest_index + 1)
    if primes_list[$0] == primes_list[$1]:
        assert $3(primes_list) == primes_list[$0]
    else:
        assert $3(primes_list) == 1


# To control the testing cost, only if the largest index does not exceed 10, this test will execute.
def test_power_of_num():
    if largest_index <= 10:
        for n in [2, 3]:
            power_list = [pow(n,i) for i in range(1, largest_index + 2)]
            if len(power_list) < 2:
                assert $3(power_list) == None
            else:
                expected_result = min(power_list[$0], power_list[$1])
                assert $3(power_list) == expected_result
